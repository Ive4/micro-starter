buildscript {
    repositories {
        jcenter()
        mavenCentral()
        maven { url 'http://oss.jfrog.org/artifactory/oss-snapshot-local/' }
    }
    dependencies {
        classpath 'org.asciidoctor:asciidoctor-gradle-plugin:1.5.3'
        classpath 'org.asciidoctor:asciidoctorj-pdf:1.5.0-alpha.10.1'
        classpath 'org.springframework.boot:spring-boot-gradle-plugin:1.4.0.RELEASE'
        classpath 'io.github.swagger2markup:swagger2markup-spring-restdocs-ext:1.3.1'
        classpath 'io.github.swagger2markup:swagger2markup-gradle-plugin:1.3.1'
        classpath "org.ajoberstar:gradle-git:1.7.2"
    }
}

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'org.springframework.boot'
apply plugin: 'org.asciidoctor.convert'
apply plugin: 'io.github.swagger2markup'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'org.ajoberstar.github-pages'

version = '1.0'
group = 'sky233'

jar {
    baseName = 'documentation-service'
    archiveName = 'documentation-service.jar'
    dependsOn asciidoctor
    from("${asciidoctor.outputDir}/html5") {
        into 'static/docs'
    }
    from("${asciidoctor.outputDir}/pdf") {
        into 'static/docs'
    }
}

tasks.withType(JavaCompile) {
    sourceCompatibility = "1.8"
    targetCompatibility = "1.8"
    options.deprecation = true
    options.encoding = 'UTF-8'
    options.compilerArgs << "-Xlint:unchecked"
}

ext {
    asciiDocOutputDir = file("${buildDir}/asciidoc/generated")
    swaggerOutputDir = file("${buildDir}/swagger")
    snippetsOutputDir = file("${buildDir}/asciidoc/snippets")
}

repositories {
    jcenter()
    mavenCentral()
    maven { url 'https://repo.spring.io/snapshot' }
    maven { url 'http://oss.jfrog.org/artifactory/oss-snapshot-local/' }
    mavenLocal()
}

dependencyManagement {
    imports {
        mavenBom("org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}")
    }
    imports {
        mavenBom("org.springframework.boot:spring-boot-dependencies:${springBootVersion}")
    }
}

def structurizrVersion = '1.0.0-RC4'
def swaggerVersion = '1.5.16'
def springfoxVersion = '2.7.0'
def restdocsVersion = '1.2.2.RELEASE'

dependencies {
    compile(
            project(":commons-api"),
            project(":users-command"),
            project(":users-query"),
            "io.swagger:swagger-annotations:${swaggerVersion}",
            "com.h2database:h2",

            "net.logstash.logback:logstash-logback-encoder:4.5.1",
            "com.fasterxml.jackson.dataformat:jackson-dataformat-smile:${jacksonVersion}",
            "com.fasterxml.jackson.module:jackson-module-afterburner:${jacksonVersion}",
            "com.fasterxml.jackson.module:jackson-module-jsonSchema:${jacksonVersion}",

            "io.springfox:springfox-swagger2:${springfoxVersion}",
            "io.springfox:springfox-bean-validators:${springfoxVersion}",
            "io.springfox:springfox-staticdocs:2.6.1",
            "io.springfox:springfox-data-rest:${springfoxVersion}",
            "io.springfox:springfox-swagger-ui:2.5.0",

            "org.springframework.restdocs:spring-restdocs-asciidoctor:${restdocsVersion}",
            "io.github.swagger2markup:swagger2markup-spring-restdocs-ext:1.3.1",

//            "org.springframework.boot:spring-boot-starter-actuator:${springBootVersion}",
            "org.springframework.boot:spring-boot-starter-web:${springBootVersion}",
            "org.springframework.boot:spring-boot-starter-amqp:${springBootVersion}",
    )
    testCompile(
            "com.structurizr:structurizr-core:${structurizrVersion}",
            "com.structurizr:structurizr-annotations:${structurizrVersion}",
            "com.structurizr:structurizr-spring:${structurizrVersion}",
            "org.springframework.restdocs:spring-restdocs-mockmvc:1.1.1.RELEASE",
            "org.springframework.boot:spring-boot-starter-test:${springBootVersion}"
    )
}


test {
    systemProperty 'io.springfox.staticdocs.outputDir', swaggerOutputDir
    systemProperty 'io.springfox.staticdocs.snippetsOutputDir', snippetsOutputDir
}

convertSwagger2markup {
    dependsOn test
    swaggerInput "${swaggerOutputDir}/swagger.json"
    outputDir asciiDocOutputDir
    config = [
            'swagger2markup.generatedExamplesEnabled'                :  true,
            'swagger2markup.pathsGroupedBy'                          : 'TAGS',
            'swagger2markup.extensions.springRestDocs.snippetBaseUri': snippetsOutputDir.getAbsolutePath()]
}

asciidoctor {
    dependsOn convertSwagger2markup
    sources {
        include 'index.adoc'
    }
    backends = ['html5', 'pdf']
    attributes = [
            doctype    : 'book',
            toc        : 'left',
            toclevels  : '3',
            numbered   : '',
            sectlinks  : '',
            sectanchors: '',
            hardbreaks : '',
            generated  : asciiDocOutputDir
    ]
}

publishGhPages.dependsOn asciidoctor

githubPages {
    repoUri = 'https://github.com/sky233/micro-starter.git'

    credentials {
        username = project.hasProperty('githubUser') ? project.githubUser : System.getenv('GITHUB_USER')
        password = project.hasProperty('githubPassword') ? project.githubPassword : System.getenv('GITHUB_PASSWORD')
    }

    pages {
        from file(asciidoctor.outputDir.path + '/html5')
        into project.version
    }
}


